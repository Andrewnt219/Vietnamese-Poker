{"version":3,"sources":["Player/Player.module.css","App.module.css","Player/poker.svg","Player/gaming.svg","Player/Player.js","InitGame/InitGame.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","player","props","className","classes","name","src","srcAvatar","alt","avatar","icon","betIcon","text","bet","cardIcon","cardNumber","score","initGame","players","changeName","i","key","id","htmlFor","type","onChange","event","count","container","App","state","card","playerCount","error","turn","gameEnd","showInit","showGame","playerNumberHandler","target","value","push","asset","setState","index","gameStart","length","j","Math","floor","random","console","log","map","pop","draw","activePlayer","utils","activePlayerIndex","deck","reduce","cardValue","deal","Number","joinClass","css","join","init","max","this","InitGame","onClick","game","playerComponent","btn","Player","buttonControls","button","red","gameUI","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3d1b097f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"icon\":\"Player_icon__1aRye\",\"player\":\"Player_player__1s3kY\",\"name\":\"Player_name__efXUr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3gHKJ\",\"gameUI\":\"App_gameUI__2A5rm\",\"button\":\"App_button__1KESI\",\"red\":\"App_red__s38FW\"};","module.exports = __webpack_public_path__ + \"static/media/poker.8424aa98.svg\";","module.exports = __webpack_public_path__ + \"static/media/gaming.ea1f3066.svg\";","import React from 'react';\r\n\r\nimport classes from './Player.module.css'\r\nimport betIcon from './poker.svg'\r\nimport cardIcon from './gaming.svg'\r\n\r\nconst player = (props) => {\r\n    return (\r\n        <div className={classes.player}>\r\n            <p className={classes.name}>{props.name}</p>\r\n            <img src={props.srcAvatar} alt=\"Avatar\" className={classes.avatar} />\r\n            <div >\r\n                <img  className={classes.icon} src={betIcon} alt=\"Bet\" />\r\n                <p className={classes.text}>{props.bet}</p>\r\n            </div>\r\n            <div>\r\n                <img className={classes.icon} src={cardIcon} alt=\"Cards\" />\r\n                <p className={classes.text}>{props.cardNumber}</p>\r\n            </div>\r\n            <div className={classes.score}>{props.score}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default player;","import React from 'react';\r\nimport classes from './InitGame.module.css'\r\nconst initGame = (props) => {\r\n    let players =[], changeName = props.changeName;\r\n    for (let i = 0; i < props.count; i++) {\r\n        players[i] = (\r\n            <div className={classes.player} key={props.players[i].id}>\r\n                <label htmlFor=\"\">\r\n                    <p>Player {i + 1}'s name</p><input type=\"text\" onChange={(event) => {changeName(event, i)}}/>\r\n                </label>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div className={classes.container}>\r\n            {players}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default initGame;","import React, { Component } from 'react';\nimport classes from './App.module.css';\nimport Player from './Player/Player'\nimport InitGame from './InitGame/InitGame'\n\nclass App extends Component {\n  state = {\n    /* Game stats */\n    players: [],\n    card: [\n      1, 1, 1, 1,\n      2, 2, 2, 2,\n      3, 3, 3, 3,\n      4, 4, 4, 4,\n      5, 5, 5, 5,\n      6, 6, 6, 6,\n      7, 7, 7, 7,\n      8, 8, 8, 8,\n      9, 9, 9, 9,\n      10, 10, 10, 10,\n      10, 10, 10, 10,\n      10, 10, 10, 10\n    ],\n    playerCount: 0,\n    /* game controls */\n    error: '',\n    turn: 0,\n    gameEnd: false,\n    /* display controls */\n    showInit: true,\n    showGame: false\n  }\n\n  /* Game initialization phase */\n  /* Custom number of players */\n  playerNumberHandler = (event) => {\n    let playerCount = event.target.value, error = \"\";\n    if (playerCount > 15) {\n      error = \"Maximum 15 players!\"\n      playerCount = 15;\n    }\n    const players = [];\n    for (let i = 0; i < playerCount; i++) {\n      players.push({\n        asset: 200,\n        id: `player-${i}`,\n        name: `player-${i}`,\n        card: [],\n        /* cardNumber: 0, */ //remove due to inconsistent\n        bet: 50,\n        /*  score: 0 */ //remove due to inconsistent\n      })\n    }\n    this.setState({ players: players, playerCount: playerCount, error: error });\n  }\n  /* Modify player's name */\n  changeName = (event, index) => {\n    const players = [...this.state.players];\n    players[index].name = event.target.value;\n    this.setState({ players: players })\n  }\n  gameStart = (event) => {\n    /* Start game with custom asset \n    const players = [...this.state.players];\n    event.target.value === \"Game Start!\" ? players.map(player => {player.}) */\n\n    /* shuffle deck */\n    const card = [...this.state.card];\n    for (let i = card.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [card[i], card[j]] = [card[j], card[i]];\n      console.log(j);\n    }\n\n\n    /* Distributes cards */\n    let players = [...this.state.players];\n    for (let i = 0; i < 2; i++) players = players.map(player => { player.card.push(card.pop()); return player });\n\n    /* hide init */\n    /* display Game UI */\n    this.setState({ players: players, card: card, showInit: false, showGame: true, error:\"\" });\n\n  }\n\n  /* Game phase */\n  draw = () => {\n    const players = [...this.state.players];\n    const activePlayer = players[this.utils.activePlayerIndex()];\n\n    /* maximum 5 cards */\n    if (activePlayer.card.length < 5) {\n      const deck = this.state.card;\n      activePlayer.card[activePlayer.card.length] = deck.pop();\n      /* calculate score */\n      const score = activePlayer.card.reduce((score, cardValue) => score + cardValue)\n      /* announce winner if card = 5 and value < 21 */\n      this.setState({ players: players, error: \"\" })\n    } else \n      this.setState({error:\"5 cards max!\"})\n  }\n\n  deal = () => {\n    /* if last player then announce winner */\n    if (this.state.turn === Number(this.state.playerCount - 1)) {\n      /* disable */\n      this.setState({ gameEnd: true, error:\"\" });\n      /* Result here */\n    } else {\n      /* only deal if score > 16 */\n      const players = [...this.state.players];\n      const activePlayer = players[this.utils.activePlayerIndex()];\n      if (activePlayer.card.reduce((score, cardValue) => score + cardValue) > 15) {\n        let turn = this.state.turn;\n        turn++;\n        this.setState({ turn: turn, error:\"\" });\n      } else this.setState({error: \"Score > 15 to deal\"})\n    }\n    /* set active */\n  }\n\n  /* Utilities */\n  utils = {\n    joinClass: (...css) => css.join(' '),\n    activePlayerIndex: () => this.state.turn % this.state.playerCount\n  }\n  render() {\n    /* Init UI */\n    let init = (\n      <div className={classes.init}>\n        <label htmlFor=\"\">Numbers of players<br /><input type=\"number\" max=\"15\" onChange={this.playerNumberHandler} /></label>\n        <InitGame changeName={this.changeName} count={this.state.playerCount} players={[...this.state.players]} />\n        <button onClick={this.gameStart} value=\"Game Start\">Game Start!</button>\n        <button onClick={this.gameStart} value=\"Quick Start\">Quick Start</button>\n      </div>\n    );\n    if (!this.state.showInit) init = null;\n\n    /* Gaminng UI */\n    let game = null, playerComponent = null, btn = null;\n    if (this.state.showGame) {\n      playerComponent = [...this.state.players].map(player => {\n        const score = player.card.reduce((score, cardValue) => score + cardValue);\n        return (\n          <Player name={player.name} card={player.card} cardNumber={player.card.length} bet={player.bet} score={score > 21 ? \"BUSTED\" : score} />\n        )\n      })\n      if (!this.state.gameEnd) btn = (\n        <div className={classes.buttonControls}>\n          <button className={classes.button} onClick={this.draw}>Draw</button>\n          <button className={this.utils.joinClass(classes.button, classes.red)} onClick={this.deal}>Deal</button>\n        </div>\n      )\n      game = (\n        <div className={classes.gameUI}>\n          {playerComponent}\n          {btn}\n        </div>\n      )\n    }\n\n    /* Announcement phase */\n    let result = null;\n    return (\n      <div className={classes.App} >\n        {init}\n        {game}\n        {this.state.error}\n      </div>\n    );\n\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}