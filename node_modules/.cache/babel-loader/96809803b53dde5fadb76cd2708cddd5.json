{"ast":null,"code":"var _jsxFileName = \"D:\\\\Temporary Work\\\\Project\\\\react-vietnamese-poker\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport classes from './App.module.css';\nimport Player from './Player/Player';\nimport InitGame from './InitGame/InitGame';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      /* Game stats */\n      players: [],\n      card: [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],\n      playerCount: 0,\n\n      /* game controls */\n      hasError: false,\n      turn: 0,\n      gameEnd: false,\n\n      /* display controls */\n      showInit: true,\n      showGame: false\n    };\n\n    this.playerNumberHandler = event => {\n      let playerCount = event.target.value,\n          error = \"\";\n\n      if (playerCount > 15) {\n        error = \"Maximum 15 players!\";\n        playerCount = 15;\n      }\n\n      const players = [];\n\n      for (let i = 0; i < playerCount; i++) {\n        players.push({\n          asset: 200,\n          id: `player-${i}`,\n          name: `player-${i}`,\n          card: [],\n\n          /* cardNumber: 0, */\n          //remove due to inconsistent\n          bet: 50\n          /*  score: 0 */\n          //remove due to inconsistent\n\n        });\n      }\n\n      this.setState({\n        players: players,\n        playerCount: playerCount,\n        error: error\n      });\n    };\n\n    this.changeName = (event, index) => {\n      const players = [...this.state.players];\n      players[index].name = event.target.value;\n      this.setState({\n        players: players\n      });\n    };\n\n    this.gameStart = event => {\n      /* Start game with custom asset \n      const players = [...this.state.players];\n      event.target.value === \"Game Start!\" ? players.map(player => {player.}) */\n\n      /* shuffle deck */\n      const card = [...this.state.card];\n\n      for (let i = card.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        var _ref = [card[j], card[i]];\n        card[i] = _ref[0];\n        card[j] = _ref[1];\n        console.log(j);\n      }\n      /* Distributes cards */\n\n\n      let players = [...this.state.players];\n\n      for (let i = 0; i < 2; i++) players = players.map(player => {\n        player.card.push(card.pop());\n        return player;\n      });\n      /* hide init */\n\n      /* display Game UI */\n\n\n      this.setState({\n        players: players,\n        card: card,\n        showInit: false,\n        showGame: true\n      });\n    };\n\n    this.draw = () => {\n      const players = [...this.state.players];\n      const activePlayer = players[this.utils.activePlayerIndex()];\n      /* maximum 5 cards */\n\n      if (activePlayer.card.length < 5) {\n        const deck = this.state.card;\n        activePlayer.card[activePlayer.card.length] = deck.pop();\n        /* calculate score */\n\n        const score = activePlayer.card.reduce((score, cardValue) => score + cardValue);\n        /* announce winner if card = 5 and value < 21 */\n\n        this.setState({\n          players: players\n        });\n      } else this.utils.setError(\"5 cards max\");\n    };\n\n    this.deal = () => {\n      /* if last player then announce winner */\n      if (this.state.turn === Number(this.state.playerCount - 1)) {\n        /* disable */\n        this.setState({\n          gameEnd: true\n        });\n        /* Result here */\n      } else {\n        /* only deal if score > 16 */\n        const players = [...this.state.players];\n        const activePlayer = players[this.utils.activePlayerIndex()];\n\n        if (activePlayer.card.reduce((score, cardValue) => score + cardValue) > 15) {\n          let turn = this.state.turn;\n          turn++;\n          this.setState({\n            turn: turn\n          });\n        }\n        /* set active */\n\n      }\n    };\n\n    this.error = null;\n    this.utils = {\n      joinClass: (...css) => css.join(' '),\n      activePlayerIndex: () => this.state.turn % this.state.playerCount,\n      setError: err => {\n        this.error = React.createElement(\"p\", {\n          className: classes.error,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        }, err);\n        this.setState({\n          hasError: true\n        });\n      }\n    };\n  }\n\n  render() {\n    /* Init UI */\n    let init = React.createElement(\"div\", {\n      className: classes.init,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"Numbers of players\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"number\",\n      max: \"15\",\n      onChange: this.playerNumberHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    })), React.createElement(InitGame, {\n      changeName: this.changeName,\n      count: this.state.playerCount,\n      error: this.error,\n      players: [...this.state.players],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.gameStart,\n      value: \"Game Start\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"Game Start!\"), React.createElement(\"button\", {\n      onClick: this.gameStart,\n      value: \"Quick Start\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Quick Start\"));\n    if (!this.state.showInit) init = null;\n    /* Gaminng UI */\n\n    let game = null,\n        playerComponent = null,\n        btn = null;\n\n    if (this.state.showGame) {\n      playerComponent = [...this.state.players].map(player => {\n        const score = player.card.reduce((score, cardValue) => score + cardValue);\n        return React.createElement(Player, {\n          name: player.name,\n          card: player.card,\n          cardNumber: player.card.length,\n          bet: player.bet,\n          score: score > 21 ? \"BUSTED\" : score,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153\n          },\n          __self: this\n        });\n      });\n      if (!this.state.gameEnd) btn = React.createElement(\"div\", {\n        className: classes.buttonControls,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: classes.button,\n        onClick: this.draw,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, \"Draw\"), React.createElement(\"button\", {\n        className: this.utils.joinClass(classes.button, classes.red),\n        onClick: this.deal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, \"Deal\"));\n      game = React.createElement(\"div\", {\n        className: classes.gameUI,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, playerComponent, btn);\n    }\n    /* Announcement phase */\n\n\n    let result = null;\n    return React.createElement(\"div\", {\n      className: classes.App,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, init, game, this.error);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:/Temporary Work/Project/react-vietnamese-poker/src/App.js"],"names":["React","Component","classes","Player","InitGame","App","state","players","card","playerCount","hasError","turn","gameEnd","showInit","showGame","playerNumberHandler","event","target","value","error","i","push","asset","id","name","bet","setState","changeName","index","gameStart","length","j","Math","floor","random","console","log","map","player","pop","draw","activePlayer","utils","activePlayerIndex","deck","score","reduce","cardValue","setError","deal","Number","joinClass","css","join","err","render","init","game","playerComponent","btn","buttonControls","button","red","gameUI","result"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport classes from './App.module.css';\nimport Player from './Player/Player'\nimport InitGame from './InitGame/InitGame'\n\nclass App extends Component {\n  state = {\n    /* Game stats */\n    players: [],\n    card: [\n      1, 1, 1, 1,\n      2, 2, 2, 2,\n      3, 3, 3, 3,\n      4, 4, 4, 4,\n      5, 5, 5, 5,\n      6, 6, 6, 6,\n      7, 7, 7, 7,\n      8, 8, 8, 8,\n      9, 9, 9, 9,\n      10, 10, 10, 10,\n      10, 10, 10, 10,\n      10, 10, 10, 10\n    ],\n    playerCount: 0,\n    /* game controls */\n    hasError: false,\n    turn: 0,\n    gameEnd: false,\n    /* display controls */\n    showInit: true,\n    showGame: false\n  }\n\n  /* Game initialization phase */\n  /* Custom number of players */\n  playerNumberHandler = (event) => {\n    let playerCount = event.target.value, error = \"\";\n    if (playerCount > 15) {\n      error = \"Maximum 15 players!\"\n      playerCount = 15;\n    }\n    const players = [];\n    for (let i = 0; i < playerCount; i++) {\n      players.push({\n        asset: 200,\n        id: `player-${i}`,\n        name: `player-${i}`,\n        card: [],\n        /* cardNumber: 0, */ //remove due to inconsistent\n        bet: 50,\n        /*  score: 0 */ //remove due to inconsistent\n      })\n    }\n    this.setState({ players: players, playerCount: playerCount, error: error });\n  }\n  /* Modify player's name */\n  changeName = (event, index) => {\n    const players = [...this.state.players];\n    players[index].name = event.target.value;\n    this.setState({ players: players })\n  }\n  gameStart = (event) => {\n    /* Start game with custom asset \n    const players = [...this.state.players];\n    event.target.value === \"Game Start!\" ? players.map(player => {player.}) */\n\n    /* shuffle deck */\n    const card = [...this.state.card];\n    for (let i = card.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [card[i], card[j]] = [card[j], card[i]];\n      console.log(j);\n    }\n\n\n    /* Distributes cards */\n    let players = [...this.state.players];\n    for (let i = 0; i < 2; i++) players = players.map(player => { player.card.push(card.pop()); return player });\n\n    /* hide init */\n    /* display Game UI */\n    this.setState({ players: players, card: card, showInit: false, showGame: true });\n\n  }\n\n  /* Game phase */\n  draw = () => {\n    const players = [...this.state.players];\n    const activePlayer = players[this.utils.activePlayerIndex()];\n\n    /* maximum 5 cards */\n    if (activePlayer.card.length < 5) {\n      const deck = this.state.card;\n      activePlayer.card[activePlayer.card.length] = deck.pop();\n      /* calculate score */\n      const score = activePlayer.card.reduce((score, cardValue) => score + cardValue)\n      /* announce winner if card = 5 and value < 21 */\n      this.setState({ players: players })\n    } else \n      this.utils.setError(\"5 cards max\")\n  }\n\n  deal = () => {\n    /* if last player then announce winner */\n    if (this.state.turn === Number(this.state.playerCount - 1)) {\n      /* disable */\n      this.setState({ gameEnd: true });\n      /* Result here */\n    } else {\n      /* only deal if score > 16 */\n      const players = [...this.state.players];\n      const activePlayer = players[this.utils.activePlayerIndex()];\n      if (activePlayer.card.reduce((score, cardValue) => score + cardValue) > 15) {\n        let turn = this.state.turn;\n        turn++;\n        this.setState({ turn: turn });\n      }\n      /* set active */\n    }\n\n\n  }\n  error = null;\n  /* Utilities */\n  utils = {\n    joinClass: (...css) => css.join(' '),\n    activePlayerIndex: () => this.state.turn % this.state.playerCount,\n    setError: (err) => {\n      this.error = (\n        <p className={classes.error}>{err}</p>\n      )\n      this.setState({hasError:true});\n    },\n  }\n  render() {\n    /* Init UI */\n    let init = (\n      <div className={classes.init}>\n        <label htmlFor=\"\">Numbers of players<br /><input type=\"number\" max=\"15\" onChange={this.playerNumberHandler} /></label>\n        <InitGame changeName={this.changeName} count={this.state.playerCount} error={this.error} players={[...this.state.players]} />\n        <button onClick={this.gameStart} value=\"Game Start\">Game Start!</button>\n        <button onClick={this.gameStart} value=\"Quick Start\">Quick Start</button>\n      </div>\n    );\n    if (!this.state.showInit) init = null;\n\n    /* Gaminng UI */\n    let game = null, playerComponent = null, btn = null;\n    if (this.state.showGame) {\n      playerComponent = [...this.state.players].map(player => {\n        const score = player.card.reduce((score, cardValue) => score + cardValue);\n        return (\n          <Player name={player.name} card={player.card} cardNumber={player.card.length} bet={player.bet} score={score > 21 ? \"BUSTED\" : score} />\n        )\n      })\n      if (!this.state.gameEnd) btn = (\n        <div className={classes.buttonControls}>\n          <button className={classes.button} onClick={this.draw}>Draw</button>\n          <button className={this.utils.joinClass(classes.button, classes.red)} onClick={this.deal}>Deal</button>\n        </div>\n      )\n      game = (\n        <div className={classes.gameUI}>\n          {playerComponent}\n          {btn}\n        </div>\n      )\n    }\n\n    /* Announcement phase */\n    let result = null;\n    return (\n      <div className={classes.App} >\n        {init}\n        {game}\n        {this.error}\n      </div>\n    );\n\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}