{"ast":null,"code":"var _jsxFileName = \"D:\\\\Temporary Work\\\\Project\\\\react-vietnamese-poker\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport classes from './App.module.css';\nimport Player from './Player/Player';\nimport InitGame from './InitGame/InitGame';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      /* Game stats */\n      players: [],\n      card: [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],\n      playerCount: 0,\n      error: '',\n\n      /* display controls */\n      showInit: true,\n      showGame: false\n    };\n\n    this.playerNumberHandler = event => {\n      let playerCount = event.target.value,\n          error = \"\";\n\n      if (playerCount > 15) {\n        error = \"Maximum 15 players!\";\n        playerCount = 15;\n      }\n\n      const players = [];\n\n      for (let i = 0; i < playerCount; i++) {\n        players.push({\n          asset: 200,\n          id: `player-${i}`,\n          name: `player-${i}`,\n          card: 3,\n          bet: 50,\n          score: 0\n        });\n      }\n\n      this.setState({\n        players: players,\n        playerCount: playerCount,\n        error: error\n      });\n    };\n\n    this.changeName = (event, index) => {\n      const players = [...this.state.players];\n      players[index].name = event.target.value;\n      this.setState({\n        players: players\n      });\n    };\n\n    this.gameStart = event => {\n      /* Start game with custom asset \n      const players = [...this.state.players];\n      event.target.value === \"Game Start!\" ? players.map(player => {player.}) */\n\n      /* hide init */\n      this.setState({\n        showInit: false\n      });\n      /* display Game UI */\n\n      this.setState({\n        showGame: true\n      });\n      this.players = [...this.state.players].map(player => React.createElement(Player, {\n        name: player.name,\n        card: player.card,\n        bet: player.bet,\n        score: player.score,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }));\n    };\n  }\n\n  render() {\n    /* Init UI */\n    let init = React.createElement(\"div\", {\n      className: classes.init,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Numbers of players\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"number\",\n      max: \"15\",\n      onChange: this.playerNumberHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    })), React.createElement(InitGame, {\n      changeName: this.changeName,\n      count: this.state.playerCount,\n      error: this.state.error,\n      players: [...this.state.players],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.gameStart,\n      value: \"Game Start\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Game Start!\"), React.createElement(\"button\", {\n      onClick: this.gameStart,\n      value: \"Quick Start\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Quick Start\"));\n    if (!this.state.showInit) init = null;\n    /* Gaminng UI */\n\n    let game = null;\n    if (this.state.showGame) game = React.createElement(\"div\", {\n      className: classes.gameUI,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    });\n    return React.createElement(\"div\", {\n      className: classes.App,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, init, this.players, game);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:/Temporary Work/Project/react-vietnamese-poker/src/App.js"],"names":["React","Component","classes","Player","InitGame","App","state","players","card","playerCount","error","showInit","showGame","playerNumberHandler","event","target","value","i","push","asset","id","name","bet","score","setState","changeName","index","gameStart","map","player","render","init","game","gameUI"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport classes from './App.module.css';\nimport Player from './Player/Player'\nimport InitGame from './InitGame/InitGame'\n\nclass App extends Component {\n  state = {\n    /* Game stats */\n    players: [],\n    card: [\n      1, 1, 1, 1,\n      2, 2, 2, 2,\n      3, 3, 3, 3,\n      4, 4, 4, 4,\n      5, 5, 5, 5,\n      6, 6, 6, 6,\n      7, 7, 7, 7,\n      8, 8, 8, 8,\n      9, 9, 9, 9,\n      10, 10, 10, 10,\n      10, 10, 10, 10,\n      10, 10, 10, 10\n    ],\n    playerCount: 0,\n    error: '',\n    /* display controls */\n    showInit: true,\n    showGame: false\n  }\n\n  /* Game initialization phase */\n  /* Custom number of players */\n  playerNumberHandler = (event) => {\n    let playerCount = event.target.value, error=\"\";\n    if (playerCount > 15) {\n      error = \"Maximum 15 players!\"\n      playerCount = 15;\n    }\n    const players = [];\n    for (let i = 0; i < playerCount; i++) {\n      players.push({\n        asset: 200,\n        id: `player-${i}`,\n        name: `player-${i}`,\n        card: 3,\n        bet: 50,\n        score:0\n      })\n    }\n    this.setState({ players: players, playerCount: playerCount, error: error });\n  }\n  /* Modify player's name */\n  changeName = (event, index) => {\n    const players = [...this.state.players];\n    players[index].name = event.target.value;\n    this.setState({players:players})\n  }\n  gameStart = (event) => {\n    /* Start game with custom asset \n    const players = [...this.state.players];\n    event.target.value === \"Game Start!\" ? players.map(player => {player.}) */\n\n    /* hide init */\n    this.setState({showInit: false});\n\n    /* display Game UI */\n    this.setState({showGame: true});\n    this.players = [...this.state.players].map(player => (\n      <Player name={player.name} card={player.card} bet={player.bet} score= {player.score}/>\n    ))\n\n  }\n\n  render() {\n    /* Init UI */\n    let init = (\n      <div className={classes.init}>\n          <label htmlFor=\"\">Numbers of players<br /><input type=\"number\" max=\"15\" onChange={this.playerNumberHandler} /></label>\n          <InitGame changeName={this.changeName} count={this.state.playerCount} error={this.state.error} players={[...this.state.players]} />\n          <button onClick={this.gameStart} value=\"Game Start\">Game Start!</button>\n          <button onClick={this.gameStart} value=\"Quick Start\">Quick Start</button>\n        </div>\n    );\n    if (!this.state.showInit) init = null;\n\n    /* Gaminng UI */\n    let game = null;\n    if (this.state.showGame) game = (\n      <div className={classes.gameUI}>\n\n      </div>\n    )\n\n    return (\n      <div className={classes.App} >\n        {init}\n        {this.players}\n        {game}\n      </div>\n    );\n\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}