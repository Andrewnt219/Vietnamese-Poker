{"ast":null,"code":"var _jsxFileName = \"D:\\\\Temporary Work\\\\Project\\\\react-poker-vn\\\\Vietnamese-Poker\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport classes from './App.module.css';\nimport Player from './Player/Player';\nimport InitGame from './InitGame/InitGame';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      /* Game resources */\n      players: [],\n      card: [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],\n      playerCount: 0,\n\n      /* game controls */\n      error: '',\n      turn: 0,\n\n      /* display controls */\n      phase: 0 // 0: Init, 1: Game, 2: End\n\n    };\n\n    this.playerNumberHandler = event => {\n      let playerCount = event.target.value,\n          error = \"\";\n\n      if (playerCount > 10) {\n        error = \"Maximum 10 players!\";\n        playerCount = 10;\n      }\n      /* Random avatar allocate */\n\n\n      for (let i = avatars.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        var _ref = [avatars[j], avatars[i]];\n        avatars[i] = _ref[0];\n        avatars[j] = _ref[1];\n      }\n\n      const players = [];\n\n      for (let i = 0; i < playerCount; i++) {\n        players.push({\n          id: `player-${i}`,\n          name: `player-${i}`,\n          card: []\n          /* cardNumber: 0, */\n          //remove due to inconsistent\n\n          /*  score: 0 */\n          //remove due to inconsistent\n\n        });\n      }\n\n      this.setState({\n        players: players,\n        playerCount: playerCount,\n        error: error\n      });\n    };\n\n    this.changeName = (event, index) => {\n      const players = [...this.state.players];\n      players[index].name = event.target.value;\n      this.setState({\n        players: players\n      });\n    };\n\n    this.gameStart = () => {\n      if (this.state.playerCount > 1) {\n        /* shuffle deck */\n        const card = [...this.state.card];\n\n        for (let i = card.length - 1; i > 0; i--) {\n          let j = Math.floor(Math.random() * (i + 1));\n          var _ref2 = [card[j], card[i]];\n          card[i] = _ref2[0];\n          card[j] = _ref2[1];\n          console.log(j);\n        }\n        /* Distributes cards */\n\n\n        let players = [...this.state.players];\n\n        for (let i = 0; i < 2; i++) players = players.map(player => {\n          player.card.push(card.pop());\n          return player;\n        });\n        /* hide init & display game UI */\n\n\n        this.setState({\n          players: players,\n          card: card,\n          phase: 1,\n          error: \"\"\n        });\n      } else this.setState({\n        error: \"There must be at least 2 players\"\n      });\n    };\n\n    this.draw = () => {\n      const players = [...this.state.players];\n      const activePlayerIndex = this.state.turn % this.state.playerCount;\n      const activePlayer = players[activePlayerIndex];\n      /* maximum 5 cards */\n\n      if (activePlayer.card.length < 5) {\n        const deck = this.state.card;\n        activePlayer.card[activePlayer.card.length] = deck.pop();\n        /* calculate score */\n\n        const score = activePlayer.card.reduce((score, cardValue) => score + cardValue);\n        /* announce winner if card = 5 and value < 21 */\n\n        if (activePlayer.card.length === 5 && score <= 21) {}\n\n        this.setState({\n          players: players,\n          error: \"\"\n        });\n      } else this.setState({\n        error: \"5 cards max!\"\n      });\n    };\n\n    this.deal = () => {\n      /* if last player then announce winner */\n      if (this.state.turn === Number(this.state.playerCount - 1)) {\n        /* End game */\n        this.setState({\n          phase: 2,\n          error: \"\"\n        });\n      } else {\n        const players = [...this.state.players];\n        const activePlayerIndex = this.state.turn % this.state.playerCount;\n        const activePlayer = players[activePlayerIndex];\n        /* only deal if score > 16 */\n\n        if (activePlayer.card.reduce((score, cardValue) => score + cardValue) > 15 || activePlayer.card.length === 5) {\n          let turn = this.state.turn;\n          turn++;\n          this.setState({\n            turn: turn,\n            error: \"\"\n          });\n        } else this.setState({\n          error: \"Score > 15 to deal\"\n        });\n      }\n      /* set active */\n\n    };\n  }\n\n  render() {\n    let ui = null;\n\n    switch (this.state.phase) {\n      case 0:\n        ui = React.createElement(\"div\", {\n          className: classes.init,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        }, React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        }, \"Numbers of players\"), React.createElement(\"input\", {\n          className: classes.inputNumber,\n          type: \"number\",\n          max: \"10\",\n          onChange: this.playerNumberHandler,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        }), React.createElement(\"button\", {\n          className: classes.startBtn,\n          onClick: this.gameStart,\n          value: \"Game Start!\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }, \"Game Start!\"), React.createElement(InitGame, {\n          changeName: this.changeName,\n          count: this.state.playerCount,\n          players: [...this.state.players],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        }));\n        break;\n\n      case 1:\n        const playerComponent = [...this.state.players].map(player => {\n          const score = player.card.reduce((score, cardValue) => score + cardValue);\n          return React.createElement(Player, {\n            key: player.name,\n            name: player.name,\n            card: player.card,\n            cardNumber: player.card.length,\n            score: score > 21 ? \"BUSTED\" : player.card.length === 5 ? \"WINNER\" : score,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 140\n            },\n            __self: this\n          });\n        });\n        ui = React.createElement(\"div\", {\n          className: classes.game,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145\n          },\n          __self: this\n        }, playerComponent, React.createElement(\"button\", {\n          className: classes.button,\n          onClick: this.draw,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147\n          },\n          __self: this\n        }, \"Draw\"), React.createElement(\"button\", {\n          className: classes.button,\n          onClick: this.deal,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148\n          },\n          __self: this\n        }, \"Deal\"));\n        break;\n\n      case 2:\n        ui = React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153\n          },\n          __self: this\n        }, \"End Game\");\n        break;\n\n      default:\n        ui = React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          },\n          __self: this\n        }, \"Whoops! Something went wrong ... \");\n    }\n\n    return React.createElement(\"div\", {\n      className: classes.App,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: classes.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, \"Vietnamese Poker\"), React.createElement(\"div\", {\n      className: classes.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, ui, React.createElement(\"p\", {\n      className: classes.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, this.state.error)));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:/Temporary Work/Project/react-poker-vn/Vietnamese-Poker/src/App.js"],"names":["React","Component","classes","Player","InitGame","App","state","players","card","playerCount","error","turn","phase","playerNumberHandler","event","target","value","i","avatars","length","j","Math","floor","random","push","id","name","setState","changeName","index","gameStart","console","log","map","player","pop","draw","activePlayerIndex","activePlayer","deck","score","reduce","cardValue","deal","Number","render","ui","init","inputNumber","startBtn","playerComponent","game","button","title","container"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport classes from './App.module.css';\nimport Player from './Player/Player'\nimport InitGame from './InitGame/InitGame'\n\nclass App extends Component {\n  state = {\n    /* Game resources */\n    players: [],\n    card: [\n      1, 1, 1, 1,\n      2, 2, 2, 2,\n      3, 3, 3, 3,\n      4, 4, 4, 4,\n      5, 5, 5, 5,\n      6, 6, 6, 6,\n      7, 7, 7, 7,\n      8, 8, 8, 8,\n      9, 9, 9, 9,\n      10, 10, 10, 10,\n      10, 10, 10, 10,\n      10, 10, 10, 10\n    ],\n    playerCount: 0,\n    /* game controls */\n    error: '',\n    turn: 0,\n    /* display controls */\n    phase: 0 // 0: Init, 1: Game, 2: End\n  }\n\n  /* Game initialization phase */\n  /* Custom number of players */\n  playerNumberHandler = (event) => {\n    let playerCount = event.target.value, error = \"\";\n    if (playerCount > 10) {\n      error = \"Maximum 10 players!\"\n      playerCount = 10;\n    }\n    /* Random avatar allocate */\n    for (let i = avatars.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [avatars[i], avatars[j]] = [avatars[j], avatars[i]];\n    }\n    const players = [];\n    for (let i = 0; i < playerCount; i++) {\n      players.push({\n        id: `player-${i}`,\n        name: `player-${i}`,\n        card: [],\n        /* cardNumber: 0, */ //remove due to inconsistent\n        /*  score: 0 */ //remove due to inconsistent\n      })\n    }\n    this.setState({ players: players, playerCount: playerCount, error: error });\n  }\n  /* Modify player's name */\n  changeName = (event, index) => {\n    const players = [...this.state.players];\n    players[index].name = event.target.value;\n    this.setState({ players: players })\n  }\n  gameStart = () => {\n    if (this.state.playerCount > 1) {\n      /* shuffle deck */\n      const card = [...this.state.card];\n      for (let i = card.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [card[i], card[j]] = [card[j], card[i]];\n        console.log(j);\n      }\n\n\n      /* Distributes cards */\n      let players = [...this.state.players];\n      for (let i = 0; i < 2; i++) players = players.map(player => { player.card.push(card.pop()); return player });\n\n      /* hide init & display game UI */\n      this.setState({ players: players, card: card, phase: 1, error: \"\" });\n    } else this.setState({ error: \"There must be at least 2 players\" })\n\n  }\n\n  /* Game phase */\n  draw = () => {\n    const players = [...this.state.players];\n    const activePlayerIndex = this.state.turn % this.state.playerCount;\n    const activePlayer = players[activePlayerIndex];\n\n    /* maximum 5 cards */\n    if (activePlayer.card.length < 5) {\n      const deck = this.state.card;\n      activePlayer.card[activePlayer.card.length] = deck.pop();\n      /* calculate score */\n      const score = activePlayer.card.reduce((score, cardValue) => score + cardValue)\n      /* announce winner if card = 5 and value < 21 */\n      if (activePlayer.card.length === 5 && score <= 21) { }\n\n      this.setState({ players: players, error: \"\" })\n    } else\n      this.setState({ error: \"5 cards max!\" })\n  }\n\n  deal = () => {\n    /* if last player then announce winner */\n    if (this.state.turn === Number(this.state.playerCount - 1)) {\n      /* End game */\n      this.setState({ phase: 2, error: \"\" });\n    } else {\n      const players = [...this.state.players];\n      const activePlayerIndex = this.state.turn % this.state.playerCount\n      const activePlayer = players[activePlayerIndex];\n      /* only deal if score > 16 */\n      if (activePlayer.card.reduce((score, cardValue) => score + cardValue) > 15 || activePlayer.card.length === 5) {\n        let turn = this.state.turn;\n        turn++;\n        this.setState({ turn: turn, error: \"\" });\n      } else this.setState({ error: \"Score > 15 to deal\" })\n    }\n    /* set active */\n  }\n\n  render() {\n    let ui = null;\n    switch (this.state.phase) {\n      case 0:\n        ui = (\n          <div className={classes.init}>\n            <h3>Numbers of players</h3>\n            <input className={classes.inputNumber} type=\"number\" max=\"10\" onChange={this.playerNumberHandler} />\n            <button className={classes.startBtn} onClick={this.gameStart} value=\"Game Start!\">Game Start!</button>\n            <InitGame changeName={this.changeName} count={this.state.playerCount} players={[...this.state.players]} />\n          </div>\n        );\n        break;\n      case 1:\n        const playerComponent = [...this.state.players].map(player => {\n          const score = player.card.reduce((score, cardValue) => score + cardValue);\n          return (\n            <Player key={player.name} name={player.name} card={player.card} cardNumber={player.card.length} score={score > 21 ? \"BUSTED\" : player.card.length === 5 ? \"WINNER\" : score} />\n          )\n        }\n        )\n        ui = (\n          <div className={classes.game}>\n            {playerComponent}\n            <button className={classes.button} onClick={this.draw}>Draw</button>\n            <button className={classes.button} onClick={this.deal}>Deal</button>\n          </div>\n        )\n        break;\n      case 2:\n        ui = (<p>End Game</p>);\n        break;\n      default:\n        ui = (<p>Whoops! Something went wrong ... </p>)\n    }\n    return (\n      <div className={classes.App} >\n        <h1 className={classes.title}>Vietnamese Poker</h1>\n        <div className={classes.container}>\n          {ui}\n          <p className={classes.error}>{this.state.error}</p>\n        </div>\n\n      </div>\n    );\n\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}